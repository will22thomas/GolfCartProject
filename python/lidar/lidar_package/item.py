"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class item(object):
    __slots__ = ["timestamp", "framecount", "x2Coordinate", "y2Coordinate", "z2Coordinate", "coordinates", "intensity"]

    __typenames__ = ["string", "int64_t", "double", "double", "double", "float", "int64_t"]

    __dimensions__ = [None, None, [3], [3], [3], ["framecount", 3], ["framecount"]]

    def __init__(self):
        self.timestamp = ""
        self.framecount = 0
        self.x2Coordinate = [ 0.0 for dim0 in range(3) ]
        self.y2Coordinate = [ 0.0 for dim0 in range(3) ]
        self.z2Coordinate = [ 0.0 for dim0 in range(3) ]
        self.coordinates = []
        self.intensity = []

    def encode(self):
        buf = BytesIO()
        buf.write(item._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __timestamp_encoded = self.timestamp.encode('utf-8')
        buf.write(struct.pack('>I', len(__timestamp_encoded)+1))
        buf.write(__timestamp_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">q", self.framecount))
        buf.write(struct.pack('>3d', *self.x2Coordinate[:3]))
        buf.write(struct.pack('>3d', *self.y2Coordinate[:3]))
        buf.write(struct.pack('>3d', *self.z2Coordinate[:3]))
        for i0 in range(self.framecount):
            buf.write(struct.pack('>3f', *self.coordinates[i0][:3]))
        buf.write(struct.pack('>%dq' % self.framecount, *self.intensity[:self.framecount]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != item._get_packed_fingerprint():
            raise ValueError("Decode error")
        return item._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = item()
        __timestamp_len = struct.unpack('>I', buf.read(4))[0]
        self.timestamp = buf.read(__timestamp_len)[:-1].decode('utf-8', 'replace')
        self.framecount = struct.unpack(">q", buf.read(8))[0]
        self.x2Coordinate = struct.unpack('>3d', buf.read(24))
        self.y2Coordinate = struct.unpack('>3d', buf.read(24))
        self.z2Coordinate = struct.unpack('>3d', buf.read(24))
        self.coordinates = []
        for i0 in range(self.framecount):
            self.coordinates.append(struct.unpack('>3f', buf.read(12)))
        self.intensity = struct.unpack('>%dq' % self.framecount, buf.read(self.framecount * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if item in parents: return 0
        tmphash = (0xe56f13e5e83a5bac) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if item._packed_fingerprint is None:
            item._packed_fingerprint = struct.pack(">Q", item._get_hash_recursive([]))
        return item._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", item._get_packed_fingerprint())[0]

